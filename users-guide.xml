<?xml version="1.0"?>
<book xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:noNamespaceSchemaLocation='http://www.docbook.org/xsd/4.4/docbook.xsd' >
<!-- :indentSize=2:tabSize=2: -->
<bookinfo>
  <title>CoffeeScript SideKick Plugin Guide</title>
  <authorgroup>
    <author><firstname>Marc</firstname><surname>HÃ¤fner</surname></author>
  </authorgroup>

  <legalnotice>
    <title>Legal Notice</title>
    <para>
      Permission is granted to copy, distribute and/or modify this document
      under the terms of the GNU Free Documentation License, Version 1.1 or
      any later version published by the Free Software Foundation; with no
      <quote>Invariant Sections</quote>, <quote>Front-Cover Texts</quote> or
      <quote>Back-Cover Texts</quote>, each as defined in the license. A copy
      of the license can be found in the file
      <filename>COPYING.DOC.txt</filename> included with jEdit.
    </para>
  </legalnotice>
</bookinfo>

<chapter id="intro"><title>Introduction</title>
  <para>
    This plugin provides a simple SideKick parser for the
    <ulink url="http://coffeescript.org/">CoffeeScript</ulink> language.
  </para>
  <para>
    Contains the CoffeeScript 1.3.3 parser which has been modified to record
    line numbers and report and skip errornous constructs. The resulting AST
    is used to construct the SideKick tree. Parser errors are forwarded to the
    ErrorList.
  </para>
</chapter>

<chapter id="function"><title>Functional scope</title>
  <para>
    Currently these constructs are recognized:
    <itemizedlist>
      <listitem>
        <para>
          Class declarations
          <programlisting>
            class C
          </programlisting>
        </para>
      </listitem>
      <listitem>
        <para>
          Assignments of class and code to variables or properties
          (including conditional assignments)
          <programlisting>
            f = (x, y, z) ->
            C = class
            o.f = (a, b)->
            f ?= () ->
          </programlisting>
        </para>
      </listitem>
      <listitem>
        <para>
          Prototype assignments inside class declarations
          <programlisting>
            class C
              @static: (a, b) ->
              method: (x, y, z) ->
              D: class
          </programlisting>
        </para>
      </listitem>
    </itemizedlist>
    These must be either top level constructs or within previously recognized
    constructs. They may not be parenthesised or otherwise wrapped (e.g.
    inside call parameters).
  </para>
  <para>
    The name of the SideKick node is the first (leftmost) recognizable
    assignment if multiple possibilities are given.
    Property assignments will result in a dotted name.
    E.g. <code>exports.E = D = class C</code> will show up as a single node
    <code>exports.E class</code>.
  </para>
  <para>
    The resulting tree represents the source structure (which is not
    necessarily the functional structure).
  </para>
</chapter>

<chapter id="options"><title>Options</title>
  <glosslist>
    <glossentry>
      <glossterm>Show parser errors in ErrorList</glossterm>
      <glossdef><para>
        Syntax errors encountered while parsing will be forwarded to the
        ErrorList.</para></glossdef>
    </glossentry>
    <glossentry>
      <glossterm>Display function parameters</glossterm>
      <glossdef><para>
        Display a simplified version of the parameter definition,
        without default values.
        Destructuring parameters are partially supported: In objects only
        the lookup keys are displayed. If a key in an array is to complex it
        may be replaced by <code>_</code>.</para></glossdef>
    </glossentry>
  </glosslist>
</chapter>

<chapter id="problems"><title>Known problems</title>
  <itemizedlist>
    <listitem>
      <para>
        Parsing is quite slow since the Lexer is based upon regular
        expressions which do not (yet?) have a adequatly fast implementation
        in Rhino.
        It is therefore not advisable to let SideKick parse on keystrokes.
      </para>
    </listitem>
  </itemizedlist>
</chapter>

<chapter id="license"><title>License and Acknowledgments</title>
  <para>
    This software relies upon and incorporates large parts of CoffeeScript by
    Jeremy Ashkenas and others.
    Both are released under a <ulink url="http://opensource.org/licenses/MIT">
    MIT License.</ulink>
  </para>
</chapter>
</book>
