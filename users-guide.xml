<?xml version="1.0"?>
<book xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:noNamespaceSchemaLocation='http://www.docbook.org/xsd/4.4/docbook.xsd' >
<!-- :indentSize=2:tabSize=2: -->
<bookinfo>
  <title>CoffeeScript SideKick Plugin Guide</title>
  <authorgroup>
    <author><firstname>Marc</firstname><surname>HÃ¤fner</surname></author>
  </authorgroup>

  <legalnotice>
    <title>Legal Notice</title>
    <para>
      Permission is granted to copy, distribute and/or modify this document
      under the terms of the GNU Free Documentation License, Version 1.1 or
      any later version published by the Free Software Foundation; with no
      <quote>Invariant Sections</quote>, <quote>Front-Cover Texts</quote> or
      <quote>Back-Cover Texts</quote>, each as defined in the license. A copy
      of the license can be found in the file
      <filename>COPYING.DOC.txt</filename> included with jEdit.
    </para>
  </legalnotice>
</bookinfo>

<chapter id="intro"><title>Introduction</title>
  <para>
    This plugin provides a simple SideKick parser for the
    <ulink url="http://coffeescript.org/">CoffeeScript</ulink> language.
  </para>
  <para>
    Contains the CoffeeScript 1.4.0 parser which has been modified to record
    line numbers and report and skip erroneous constructs. The resulting AST
    is used to construct the SideKick tree. Parser errors are forwarded to the
    ErrorList.
  </para>
</chapter>

<chapter id="options"><title>Options</title>
  <glosslist>
    <glossentry>
      <glossterm>Show parser errors in ErrorList</glossterm>
      <glossdef><para>
        Syntax errors encountered while parsing will be forwarded to the
        ErrorList.</para></glossdef>
    </glossentry>
    <glossentry>
      <glossterm>Display function parameters</glossterm>
      <glossdef><para>
        Display a simplified version of the parameter definition, without
        default values.
        </para><para>
        Destructuring parameters are partially supported: In objects only
        the lookup keys are displayed. If a key in an array is to complex it
        may be replaced by an underline.</para></glossdef>
    </glossentry>
    <glossentry>
      <glossterm>Show icons</glossterm>
      <glossdef><para>
        Show icons in the SideKick tree, mimicking Eclipse Java style.
      </para></glossdef>
    </glossentry>
    <glossentry>
      <glossterm>Show prefix for hidden and class members</glossterm>
      <glossdef><para>
        Prefix hidden members with a minus (<code>-</code>) and class members
        with an at symbol (<code>@</code>).</para><para>
        (Hidden members are functions and subclasses in a class that are not
        assigned as a prototype property.)</para></glossdef>
    </glossentry>
    <glossentry>
      <glossterm>Display node type</glossterm>
      <glossdef><para>
        Append the type to classes (<code>&lt;class&gt;</code>) and tasks
        (<code>&lt;task&gt;</code>).</para></glossdef>
    </glossentry>
  </glosslist>
</chapter>

<chapter id="function"><title>Functional scope</title>
  <para>
    Currently these constructs are recognized:
    <itemizedlist>
      <listitem>
        <para>
          Class declarations
          <programlisting>
            class C
          </programlisting>
        </para>
      </listitem>
      <listitem>
        <para>
          Assignments of class and code to variables or properties
          (including conditional assignments)
          <programlisting>
            f = (x, y, z) ->
            C = class
            o.f = (a, b)->
            f ?= () ->
          </programlisting>
        </para>
      </listitem>
      <listitem>
        <para>
          Property assignments inside class declarations
          <programlisting>
            class C
              @static: (a, b) ->
              method: (x, y, z) ->
              D: class
          </programlisting>
        </para>
      </listitem>
      <listitem>
        <para>
          Task definitions in a Cakefile
          <programlisting>
            task "build", "builds the source", -> ...
          </programlisting>
        </para>
      </listitem>
    </itemizedlist>
    These must be either top level constructs or within previously recognized
    constructs. They may not be parenthesised or otherwise wrapped (e.g.
    inside call parameters).
  </para>
  <para>
    The name of the SideKick node is the first (leftmost) recognizable
    assignment or the "real" class name. Property assignments will result in a
    dotted name. E.g. <code>exports['E'] = D = class</code> will show up as a
    single node <code>exports.E &lt;class&gt;</code> while
    <code>exports['E'] = D = class C</code> will result in a node
    <code>C &lt;class&gt;</code>.
  </para>
  <para>
    The resulting tree represents the source structure (which is not
    necessarily the functional structure).
  </para>
</chapter>

<chapter id="problems"><title>Known problems and limitations</title>
  <para>Aside from above restrictions these problems (still) exist:
    <itemizedlist>
      <listitem>
        <para>
          Parsing is quite slow as it happens in Rhino. It is therefore not
          advisable to let SideKick parse on keystrokes.
        </para>
      </listitem>
      <listitem>
        <para>
          <code>extents</code> of class definitions are not supported / shown.
        </para>
      </listitem>
    </itemizedlist>
  </para>
</chapter>

<chapter id="license"><title>License and Acknowledgments</title>
  <para>
    This software relies upon and incorporates large parts of CoffeeScript by
    Jeremy Ashkenas and others.
    Both are released under a <ulink url="http://opensource.org/licenses/MIT">
    MIT License.</ulink>
  </para>
</chapter>
</book>
