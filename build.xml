<project name="CoffeeScriptSideKick" default="build">
    <description>
        Ant build file the CoffeeScriptSidekick plugin for jEdit.
    </description>
    <property file="../build.properties" />
    <property file="build.properties" />

    <property name="user-doc.xml" location="users-guide.xml" />
    <property name="src.dir" location="src" />
    <property name="build.dir" location="build" />
    <property name="javadoc.packagenames" value="sidekick.coffeescript" />

    <!--If you want to compile the CoffeeScript source too, change these
        accordingly.-->
    <property name="always.compile.coffeescript" value="false" />
    <property name="node.executable" value="node" />
    <property name="coffescript.dir" location="coffee-script" />

    <import file="${build.support}/plugin-build.xml" />

    <path id="project.class.path">
        <pathelement location="${jedit.plugins.dir}/SideKick.jar" />
        <pathelement location="${jedit.plugins.dir}/ErrorList.jar" />
        <pathelement location="${jedit.plugins.dir}/rhino.jar" />
    </path>

    <selector id="extraFiles">
        <and>
            <or>
                <filename name="**/actions.xml" />
                <filename name="**/browser.actions.xml" />
                <filename name="**/dockables.xml" />
                <filename name="**/services.xml" />
                <filename name="**/*.props" />
                <filename name="**/lang_*.properties" />
                <filename name="**/LICENSE" />
                <filename name="**/README" />
            </or>
            <not>
                <filename name="coffee-script/**" />
            </not>
        </and>
    </selector>

    <target name="build.prepare">
        <antcall target="compile.coffeescript" />
        <antcall target="compile.javascript" />
    </target>

    <target name="check-javascript-file">
        <condition property="do.compile.coffeescript">
            <or>
                <istrue value="${always.compile.coffeescript}" />
                <not><available file="./CoffeeScriptParser.js" /></not>
            </or>
        </condition>
    </target>

    <target name="compile.coffeescript" depends="check-javascript-file" if="do.compile.coffeescript">
        <mkdir dir="${build.dir}/coffee-script" />
        <exec executable="${node.executable}" failonerror="true">
            <arg value="${coffescript.dir}/bin/cake" />
            <arg line="--source ${src.dir}" />
            <arg line="--build ${build.dir}/coffee-script" />
            <arg line="--dist ./CoffeeScriptParser.js" />
            <arg line="--node ${node.executable}" />
            <arg line="--coffeescript ${coffescript.dir}" />
            <arg value="build" />
        </exec>
    </target>

    <target name="compile.javascript">
        <selector id="parserInterfaceFile">
            <filename name="**/ICoffeeScriptParser.java" />
        </selector>
        <antcall target="compile">
            <reference torefid="compileFiles" refid="parserInterfaceFile" />
        </antcall>
        <echo>compiling javascript...</echo>
        <java fork="yes"
              classname="org.mozilla.javascript.tools.jsc.Main"
              failonerror="true">
            <classpath>
                <path refid="default.class.path" />
                <path refid="project.class.path" />
                <pathelement path="${build.classes}" />
            </classpath>
            <arg line="-opt 1"/>
            <arg line="-implements sidekick.coffeescript.ICoffeeScriptParser" />
            <arg line="-package sidekick.coffeescript" />
            <arg line="-d ${build.classes}"/>
            <arg value="./CoffeeScriptParser.js" />
        </java>
    </target>
</project>
